import {expect} from 'chai';
import parseTokens from '../../src/parser/parse-tokens';

const tests = {
    'x': [
        [0, 'x']
    ],
    '1 2 +': [
        [0, '1'],
        [2, '2'],
        [4, '+']
    ],
    '  1   2  +   ': [
        [2, '1'],
        [6, '2'],
        [9, '+']
    ],
    '"1"': [[0, '"1"']],
    ' "1"': [[1, '"1"']],
    'a "1"': [[0, 'a'], [2, '"1"']],
    '"1 2"': [[0, '"1 2"']],
    '"1 \\" 2"': [[0, '"1 \\" 2"']],
    '1 "a b c" concat': [
        [0, '1'],
        [2, '"a b c"'],
        [10, 'concat']
    ],
    '{1}': [
        [0, '{'],
        [1, '1'],
        [2, '}']
    ],
    '{1} }{': [
        [0, '{'],
        [1, '1'],
        [2, '}'],
        [4, '}{']
    ],
    '{1} }0:1{': [
        [0, '{'],
        [1, '1'],
        [2, '}'],
        [4, '}0:1{']
    ],
    '(1) )0:1( 1': [
        [0, '('],
        [1, '1'],
        [2, ')'],
        [4, ')0:1('],
        [10, '1']
    ],
    '"a" [1,3 , 4, 6 7 +] apply': [
        [0, '"a"'],
        [4, '['],
        [5, '1'],
        [6, ','],
        [7, '3'],
        [9, ','],
        [11, '4'],
        [12, ','],
        [14, '6'],
        [16, '7'],
        [18, '+'],
        [19, ']'],
        [21, 'apply']
    ],
    '([1,3]) )0:1(': [
        [0, '('],
        [1, '['],
        [2, '1'],
        [3, ','],
        [4, '3'],
        [5, ']'],
        [6, ')'],
        [8, ')0:1(']
    ],
    '"a b c  ': [[0, '"a b c  ']],
    'x y swap = y x': [
        [0, 'x'],
        [2, 'y'],
        [4, 'swap'],
        [9, '='],
        [11, 'y'],
        [13, 'x']
    ]
};


describe('parseTokens', () => {
    Object.keys(tests).forEach(str => {
        it(`should parse "${str}"`, () => {
            expect(parseTokens(str).map(({code, position}) => ({code, position}))).to.deep.eql(tests[str].map(([position, code]) => ({position, code})));
        });
    });
});
